<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用docker在mac上安裝hexo</title>
    <url>/2024/06/28/install-hexo-on-mac-with-docker/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知是什麼原因，我嘗試了許多次都無法正常地在 mac 上安裝 hexo ，因此就只好使用 docker 安裝 ubuntu 之後再在模擬環境內安裝 hexo ，然而最近換了<del>新</del>(我爸淘汰的舊mac)電腦之後我就忘記當初是怎麼裝的了！！！ ｡ﾟヽ(ﾟ´Д&#96;)ﾉﾟ｡ ，因為當初大部分安裝都是 <a class="link"   href="https://gallen881.github.io/" >Gallen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 幫我用的我只有在旁邊看戲 (́◉◞౪◟◉‵) ，所以這次也只好找他求救，順便更加深入了解並寫成文章以防以後忘記。</p>
<h3 id="安裝-docker"><a href="#安裝-docker" class="headerlink" title="安裝 docker"></a>安裝 docker</h3><p>首先先到 <a class="link"   href="https://www.docker.com/get-started/" >docker 官網 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 下載 docker 應用程式並安裝，安裝時的設定使用預設即可</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/1.png"
                      class="[class names]"
                >
<p>安裝完成後登入或註冊一個新帳號即可開始使用</p>
<h3 id="安裝-Ubuntu-並掛載資料夾與-port-forwarding"><a href="#安裝-Ubuntu-並掛載資料夾與-port-forwarding" class="headerlink" title="安裝 Ubuntu 並掛載資料夾與 port forwarding"></a>安裝 Ubuntu 並掛載資料夾與 port forwarding</h3><p>在 docker 上安裝 ubuntu 的第一步就是先從 docker hub 上下載 ubuntu 的 image 再使用 <code>docker run</code> 指令建立 container ,但此指令在本地沒有 image 的情況下會自動下載image後再建立 container ，因此只要在terminal鍵入以下指令即可建立 container 並掛載資料夾與 port forwarding</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -i -t --name my_ubuntu -p 4000:4000 -v /target:/mount</span><br></pre></td></tr></table></figure></div>
<p>參數說明：</p>
<ul>
<li><code>run</code> : 由 image 建立 container</li>
<li><code>-i</code> : <code>-i</code> 或<code>--interactive</code> 會使容器的標準輸入(STDIN)保持開啟狀態，並允許透過標準輸入將指令傳送至容器</li>
<li><code>-t</code> : 在容器中建立一個終端機</li>
<li><code>--name</code> : 替 container 取一個容易識別的名字，若未指定， docker 將隨機生成名稱</li>
<li><code>-p</code> : 通訊阜轉接（port forwarding），格式為 -p <font color="green">本地port</font>:<font color="green">container內的port</font>，由於 hexo 的預設 server port 為4000因此這裡設為4000</li>
<li><code>-v</code> : 綁定掛載（bind mount），格式為 -v &#x2F;<font color="green">目標路徑（mac內想掛載的資料夾）</font>:&#x2F;<font color="green">掛載路徑（container內的路徑）</font></li>
<li><code>ubuntu</code> : image 的名稱，一般建議使用官方的 image 但若要使用其他 image 可使用 <code> docker search</code>指令搜尋</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/2.png"
                      class="[class names]"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/3.png"
                      class="[class names]"
                >
<p>鍵入指令後可以在 docker desktop 的 container 欄看見出現了一個新的my_ubuntu</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/4.png"
                      class="[class names]"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/5.png"
                      class="[class names]"
                >
<p>點入my_ubuntu後再進入inspect欄內可見 PortBinding 與 Mount 後有剛輸入的參數就代表綁定成功了ヽ( ° ▽°)ノ</p>
<h3 id="啟動container"><a href="#啟動container" class="headerlink" title="啟動container"></a>啟動container</h3><p>在 terminal 輸入以下指令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker start -i my_ubuntu</span><br></pre></td></tr></table></figure></div>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>start 指令與 run 指令不一樣，前者為啟動現有容器;後者為建立容器，別搞混啦！！！（這我´-ω-｀）</p>

  </div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/6.png"
                      class="[class names]"
                >
<p><code>cd</code>進入<code>mnt</code>後就可以看見先前掛載的資料夾了</p>
<h3 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h3><p>在安裝 hexo 之前必須先利用 ubuntu 內建的 atp 的套件管理器來安裝名為 npm 的套件管理器才可使用<code>apt install</code>指令安裝 hexo<br>進入container 後在 terminal 輸入以下指令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt update</span><br><span class="line">$ apt install npm</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/7.png"
                      class="[class names]"
                >
<p>安裝時會需要選擇地區與時區</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/8.png"
                      class="[class names]"
                >
<p>安裝完後使用<code>npm -v</code>檢查是否安裝成功<br>有出現版本即代表成功啦！！</p>
<p>在來就進入最精彩的部分啦！！<b style="font-size: 20px">安裝hexo</b><style type="text/css">b{animation:color-change 1s infinite;}@keyframes color-change{0%{color:red;}16.67%{color:orange;}33.34%{color:yellow;}50.01%{color:green;}66.68%{color:blue;}83.35%{color:violet;}100%{color:purple;}}</style><br>我好興奮啊啊啊錒啊ᕕ ( ᐛ ) ᕗ</p>
<p>直接輸入以下指令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>
<p>詳細解說可以在<a class="link"   href="https://hexo.io/zh-tw/" >官網 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上找到</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/9.png"
                      class="[class names]"
                >
<p>出現<code>Hexo is running</code>時點入後方連結即可進入localhost預覽網頁！！</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/10.png"
                      class="[class names]"
                >
<p>恭喜你成功安裝 hexo 囉！！ヽ(●´∀&#96;●)ﾉ</p>
<h3 id="使用-GitHub-CLI-上傳到-Github-Pages-上"><a href="#使用-GitHub-CLI-上傳到-Github-Pages-上" class="headerlink" title="使用 GitHub CLI 上傳到 Github Pages 上"></a>使用 GitHub CLI 上傳到 Github Pages 上</h3><p>雖然 hexo 有內建上傳至 Github Pages 的指令，但不知為何單獨使用的話在 docker 內會一直登入失敗，無法使用，因此才要安裝 GitHub CLI 來代替 hexo 內建登入 github 的方法</p>
<p>使用以下指令來安裝 GitHub CLI</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install gh</span><br></pre></td></tr></table></figure></div>
<p>安裝完成後鍵入以下指令來登入 github ，輸入後會跳出一些選項，下圖為我的選擇</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ gh auth login</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/11.png"
                      class="[class names]"
                >


  <div class="note p-4 mb-4 rounded-small warning">
    <p>Authenticate Git with your GitHub credentials? 這項要記得選 yes，不然會登入失敗</p>

  </div>
<p>出現<code>First copy your one-time code:xxxx-xxxx</code>時，使用瀏覽器開啟以下網址 <a class="link"   href="https://github.com/login/device" >https://github.com/login/device <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 登入你的 github 帳號，並貼上前面的八位驗證碼</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/12.png"
                      class="[class names]"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/13.png"
                      class="[class names]"
                >
<p>按下綠色的授權鈕</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/14.png"
                      class="[class names]"
                >
<p>成功在 docker 內登入 github 了！！(ﾉ&gt;ω&lt;)ﾉ</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/15.png"
                      class="[class names]"
                >
<p>正常來說應該就能順利 deploy 上 Github Pages 了 如果失敗的話可以試著再次重新登入</p>
<h3 id="把網站加入-Google-索引內"><a href="#把網站加入-Google-索引內" class="headerlink" title="把網站加入 Google 索引內"></a>把網站加入 Google 索引內</h3><p>如果想要讓自己的網站增加曝光度的話，可以試著利用 google search console 把網站加入到 Google 索引內，這樣他人在使用 google 搜尋引擎時，就能直接找到你的網站 d(&#96;･∀･)b<br>首先進入 <a class="link"   href="https://search.google.com/search-console/" >google search console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 並按下”立即開始”</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/16.png"
                      class="[class names]"
                >
<p>接著在”網址前置字元”的欄位裡填入自己的網站網址</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/17.png"
                      class="[class names]"
                >
<p>接著使用”將HTML檔案上傳到你的網站”驗證方法把上圖的html檔下載下來</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/18.png"
                      class="[class names]"
                >
<p>把下載下來的 html 檔丟到 blog&#x2F;source 裡<br>然後下一步非常重要</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/19.png"
                      class="[class names]"
                >

  <div class="note p-4 mb-4 rounded-small warning">
    <p>必須在剛剛下載的 html 內加上一行<code>layout: false</code>防止 hexo 主題因自動排版而加入其他元素</p>

  </div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/20.png"
                      class="[class names]"
                >
<p>好耶！驗證成功( ͡° ͜ʖ ͡ °)</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/21.png"
                      class="[class names]"
                >
<p>在來到 <a class="link"   href="https://search.google.com/search-console/" >google search console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 內，按下側邊欄的”網站審查”，並按下”要求建立索引”，過一段時間後google就會幫你的網站建立索引</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/install-hexo-on-mac-with-docker/22.png"
                      class="[class names]"
                >
<p>網址在 Google 服務中｡:.ﾟヽ(*´∀&#96;)ﾉﾟ.:｡</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>我又朝向我的網站建置之路邁向了一小步呢，在安裝時確實遇到了許多困難，但在我跟<a class="link"   href="https://gallen881.github.io/" >Gallen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的不斷討論與除錯下還是成功的把這個網站的基礎建立起來了，而我寫這篇文章的目的不只是在幫助我不要忘記，也希望可以幫助到有相同問題的人能較快速的解決困難，當然如果是內容有錯誤又或是有遇到安裝上的問題，都歡迎在留言區裡提出來互相交流。</p>
<h4 id="特別感謝"><a href="#特別感謝" class="headerlink" title="特別感謝"></a>特別感謝</h4><p><a class="link"   href="https://gallen881.github.io"  id=colorfula>Gallen技術指導 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><style type="text/css">#colorfula{font-size: 30px; animation:color-change 1s infinite;}@keyframes color-change{0%{color:red;}16.67%{color:orange;}33.34%{color:yellow;}50.01%{color: green;}66.68%{color:blue;}83.35%{color:violet;}100%{color:purple;}}</style><br>歐對了！這超酷大麻css也是他寫的(́◉◞౪◟◉‵)</p>
]]></content>
      <tags>
        <tag>程式</tag>
        <tag>Hexo</tag>
        <tag>docker</tag>
        <tag>OS X</tag>
      </tags>
  </entry>
  <entry>
    <title>修復古老精工鬧鐘</title>
    <url>/2024/03/10/restoring-old-seiko-alarm-clock/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近日在老媽的櫃子裡翻到了一台看起來經歷過不少歲月的SEIKO鬧鐘，經過詢問後發現是老爸小時候在用的，幾年前由於智慧型手機的普及而被棄置在櫃子的角落不再使用，所以說此鬧鐘至今起碼也有40年的歷史了，裝上電池後工作正常，但錶盤邊緣的塑膠破裂，時鐘內部也機滿了灰塵，由於本人目前還有使用實體鬧鐘的習慣，因此打算維修清潔後拿來使用。</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/1.JPG"
                      class="[class names]" title="綠色的SEIKO小鬧鐘" alt="綠色的SEIKO小鬧鐘"
                ><figcaption>綠色的SEIKO小鬧鐘</figcaption></figure>

<p>深黑色的鐘面上鑲著吸收光能後能在黑暗裡發光的螢光數字與指針，奶油白（塑膠氧化）的機身搭配上綠色的邊框，形成一股強烈的復古感</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/2.JPG"
                      class="[class names]" title="角落的破損" alt="角落的破損"
                ><figcaption>角落的破損</figcaption></figure>

<p>推測是從高處掉落所造成的 ┐(´д&#96;)┌</p>
<h3 id="開始拆解"><a href="#開始拆解" class="headerlink" title="開始拆解"></a>開始拆解</h3><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/3.JPG"
                      class="[class names]" title="分解圖" alt="分解圖"
                ><figcaption>分解圖</figcaption></figure>

<p>卸下背面的兩顆螺絲後背蓋就能輕易地與鐘面分離，前方的透明塑膠窗則是使用一字起子輕翹三個卡榫處就能脫離</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/3.5.JPG"
                      class="[class names]" title="充滿灰塵的機芯" alt="充滿灰塵的機芯"
                ><figcaption>充滿灰塵的機芯</figcaption></figure>

<p>機芯與綠色前面板是用卡榫連接再一起的，但考慮到綠色前面板老化嚴重，拆下機芯可能會導致卡榫斷裂，因此就不冒這個險了，但這樣就無法直接用水清洗，需要用到大量棉花棒</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/4.JPG"
                      class="[class names]" title="內部的陳年灰塵" alt="內部的陳年灰塵"
                ><figcaption>內部的陳年灰塵</figcaption></figure>

<p>可能是因電池蓋已亡逸許久，導致灰塵從電池艙侵入</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/5.JPG"
                      class="[class names]" title="老化斷裂的塑膠螺絲座" alt="老化斷裂的塑膠螺絲座"
                ><figcaption>老化斷裂的塑膠螺絲座</figcaption></figure>

<p>不知是我在拆解的時候斷的，還是自己老化斷掉的 ¯_(ツ)_&#x2F;¯ </p>
<h3 id="清潔"><a href="#清潔" class="headerlink" title="清潔"></a>清潔</h3><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/6.JPG"
                      class="[class names]" title="鐘面有點發霉" alt="鐘面有點發霉"
                ><figcaption>鐘面有點發霉</figcaption></figure>

<p>我使用棉花棒沾清水擦拭表面，黴斑有被擦除，但螢光數字上的污漬擦都擦不掉，因此我嘗試更用力擦拭，污漬沒被擦除，反而鐘面的烤漆不小心被我刮掉一小塊，因此我就不敢再用力擦了，就當作是留點污漬在上面呈現復古感吧！(ﾟ∀。)</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/7.JPG"
                      class="[class names]" title="清洗背蓋" alt="清洗背蓋"
                ><figcaption>清洗背蓋</figcaption></figure>

<p>背蓋的清潔則是使用菜瓜布、牙刷與洗碗精清潔，菜瓜布搭配洗碗精能使表面有灰色刮傷的塑膠恢復原本的顏色，之前修復打字機外殼時意外發現這招很有用，但這方法不推薦使用在原本就是亮面的塑膠上，因為清潔完表面會呈現霧面，要恢復亮面的話可能需要重新拋光</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/8.JPG"
                      class="[class names]" title="鐘面與機芯部分超髒" alt="鐘面與機芯部分超髒"
                ><figcaption>鐘面與機芯部分超髒</figcaption></figure>

<p>用來清潔鐘面與機芯外殼的棉花棒，看得出來清掉了不少陳年污垢</p>
<h3 id="修補"><a href="#修補" class="headerlink" title="修補"></a>修補</h3><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/9.JPG"
                      class="[class names]" title="黏合老化剝離的塑膠" alt="黏合老化剝離的塑膠"
                ><figcaption>黏合老化剝離的塑膠</figcaption></figure>

<p>使用三秒膠黏合邊緣老化剝離的塑膠，並噴上催化劑，使三秒膠加速凝固以免產生白霧</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/10.JPG"
                      class="[class names]" title="混合後的塑鋼土" alt="混合後的塑鋼土"
                ><figcaption>混合後的塑鋼土</figcaption></figure>

<p>挖出一比一的塑鋼土A劑與Ｂ劑後加以用手搓揉混合就可以開始修補裂縫了，A劑與Ｂ混合後就會開始慢慢硬化，完全硬化大概需要半天</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/11.JPG"
                      class="[class names]" title="修補裂縫（背面）" alt="修補裂縫（背面）"
                ><figcaption>修補裂縫（背面）</figcaption></figure>

<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/12.JPG"
                      class="[class names]" title="修補裂縫（正面）" alt="修補裂縫（正面）"
                ><figcaption>修補裂縫（正面）</figcaption></figure>

<p>裂縫剛好列在有圓角的角落，因此需要用塑剛土做出圓角的形狀，先取適量的塑鋼土大致填上，最後在用美工刀與一字起子修邊，並等待硬化</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/13.JPG"
                      class="[class names]" title="謎之生物 O△O" alt="謎之生物 O△O"
                ><figcaption>謎之生物 O△O</figcaption></figure>

<p>由於混合過的塑鋼土還有剩因此就做了隻有點像貓的謎之生物( ～’ω’)～</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/13.5.JPG"
                      class="[class names]" title="黏合螺絲座" alt="黏合螺絲座"
                ><figcaption>黏合螺絲座</figcaption></figure>

<p>一樣是用三秒膠固定，對三秒膠真是又愛又恨呢，每次都黏到手，但又超好用(´-ω-｀)</p>
<h3 id="完成！！！"><a href="#完成！！！" class="headerlink" title="完成！！！"></a>完成！！！</h3><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/14.JPG"
                      class="[class names]" title="組裝回去" alt="組裝回去"
                ><figcaption>組裝回去</figcaption></figure>

<p>把所有零件都組裝回去後就完成了，原本很擔心三秒膠是否撐得住螺絲鎖入時的扭力，但看起來是撐得住(＊゜ー゜)b</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/15.JPG"
                      class="[class names]" title="離家出走的電池蓋" alt="離家出走的電池蓋"
                ><figcaption>離家出走的電池蓋</figcaption></figure>

<p>之後可能要用3d列印做個電池蓋，在這之前就先用紙擋起來吧！</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/16.JPG"
                      class="[class names]" title="修補處特寫" alt="修補處特寫"
                ><figcaption>修補處特寫</figcaption></figure>

<p>修補處看起來好像之前去『台灣史前文化博物館』看到的陶瓷文物修補（如下圖）! XD</p>
<figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/17.png"
                      class="[class names]" title="博物館的史前陶罐修補" alt="博物館的史前陶罐修補"
                ><figcaption>博物館的史前陶罐修補</figcaption></figure>

<style>
.container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%;
}
.video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
</style>
<div class=container>
<iframe class=video src="https://www.youtube.com/embed/OWP8a6ZhQMg?si=OuQFh0TmDjhNiqwY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div>

<p>我個人是滿喜歡他的鈴聲的，會由小聲慢慢的漸強到超大聲，上方的關閉鬧鈴鈕也設計得滿好的，按一下是貪睡十分鐘，如果要完全關閉的話需要向下壓並旋轉，防止無意識的直接按掉鬧鈴</p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_images/20240310_1257/18.JPG"
                      class="[class names]" title="我的現任實體鬧鐘" alt="我的現任實體鬧鐘"
                ><figcaption>我的現任實體鬧鐘</figcaption></figure>

<p>左：IKEA的翻轉小鬧鐘 中：本文主角 右：1970製造的Copal MG-111</p>
<p>我會喜歡使用實體鬧鐘的原因是因為可以把不同鬧鐘分散放在房間的不同角落，這樣一定必需起身去把鬧鐘關掉，就可以減少直接把鬧鐘按掉後繼續睡的風險，我為了增加關鬧鐘的難度還把IKEA翻轉小鬧鐘放進電腦機殼裡並用螺絲鎖起來，因此每次按鬧鐘都必須先把電腦機殼的兩顆螺絲擰開才有變法把鬧鐘關掉，效果非常顯著呢！！∠( ᐛ 」∠)_</p>
]]></content>
      <tags>
        <tag>維修</tag>
        <tag>古董</tag>
      </tags>
  </entry>
  <entry>
    <title>值得紀念的第一篇文章！！！d(d＇∀＇)</title>
    <url>/2024/03/02/the-first-article/</url>
    <content><![CDATA[<p>現在是半夜三點，是個非常適合寫網站的時間，目前還沒調什麼網站的細部設定，因此感覺要先放點東西來充數一下,才不會使這裡顯得那麼空虛，希望這篇文章可以像「一束鮮花的力量」一樣，讓我有持續的動力來更新這個網站_(:3 」∠ )_</p>
]]></content>
  </entry>
</search>
